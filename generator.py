# -*- coding: utf-8 -*-
"""Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xvj6ffvGhMsV221F1AakWLNMb8cs99Ar
"""

import keras
import tensorflow as tf
import numpy as np
from keras.models import Model
from keras.layers import Input, Flatten,Dense, Convolution2D, MaxPooling2D,BatchNormalization,GlobalAveragePooling2D,Dropout
from keras.optimizers import Adam

class Generator(tf.keras.Model):
  #x_in=Input(shape=(216,216,3))

   def __init__(self,outputnum=None,rgb=False,name=None):# outputnum= 2,4,6 (num of strokes)
    super(Generator, self).__init__()
    self.outputnum=outputnum
    if (rgb==True):
      self.channelnum=13
    else:
      self.channelnum=10
    self.conv1 = Convolution2D(16, 3, 3, activation='relu')
    self.maxpool1 = MaxPooling2D((2, 2),padding="same")
    self.conv2= Convolution2D(32, 3, 3, activation='relu',padding="same")
    self.maxpool2= MaxPooling2D((2, 2),padding="same")
    self.conv3= Convolution2D(64, 3, 3, activation='relu',padding="same") #nb_filter, nb_row, nb_col
    self.maxpool3= MaxPooling2D((2, 2),padding="same")
    self.conv4= Convolution2D(64, 3, 3, activation='relu',padding="same")
    self.maxpool4= MaxPooling2D((2, 2),padding="same")
    self.dense=Dense(units = 256, activation = 'relu')
    self.flatten=Flatten()
    self.out1=Dense(self.channelnum,activation="sigmoid")
    self.out2=Dense(self.channelnum,activation="sigmoid")
    self.out3=Dense(self.channelnum,activation="sigmoid")
    self.out4=Dense(self.channelnum,activation="sigmoid")
    self.out5=Dense(self.channelnum,activation="sigmoid")
    self.out6=Dense(self.channelnum,activation="sigmoid")
  #  x=np.random.normal(size=(1,216,216,3))
   # x=tf.convert_to_tensor(x)
   # _=self.call(x)

   def call(self, inputs): 
       x=self.conv1(inputs)
       x=self.maxpool1(x)
       x=self.conv2(x)
       x=self.maxpool2(x)
       x=self.conv3(x)
       x=self.maxpool3(x)
       x=self.conv4(x)
       x=self.dense(x)
       x=self.flatten(x)
       x1=self.out1(x)
       x2=self.out2(x1)
       if(self.outputnum==2):
          return x1,x2
       x3=self.out3(x2)
       x4=self.out4(x3)
       if(self.outputnum==4):
          return x1,x2,x3,x4
       x5=self.out5(x4)
       x6=self.out6(x5)
       return x1,x2,x3,x4,x5,x6

   def model(self):
        x_in = Input(shape=(216,216,3))
        return Model(inputs=x_in, outputs=self.call(x_in))

model1=Generator(outputnum=2,name="twostroke")
model2=Generator(outputnum=4,name="fourstroke")
model3=Generator(outputnum=6,name="sixstroke")

model1.build((None,216,216,3))
model2.build((None,216,216,3))
model3.build((None,216,216,3))