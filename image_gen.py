# -*- coding: utf-8 -*-
"""image_gen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ah-TH8CFnsbXLMr0ljfaJpbvCNfAqgam
"""

import cv2  
import numpy as np
import tensorflow as tf
import tensorflow_addons as tfa

def normal(x, width):
    return (int)(x * (width - 1) + 0.5)

def draw(x0, y0, x1, y1, x2, y2, z0, z2, w0, w2, width=216):
    """ for renderer stroke dataset 
        inputs: stroke params [0,1]
        output: stroke img"""
   # x0, y0, x1, y1, x2, y2, z0, z2, w0, w2 = f
    x1 = x0 + (x2 - x0) * x1
    y1 = y0 + (y2 - y0) * y1
    x0 = normal(x0, width * 2)
    x1 = normal(x1, width * 2)
    x2 = normal(x2, width * 2)
    y0 = normal(y0, width * 2)
    y1 = normal(y1, width * 2)
    y2 = normal(y2, width * 2)
    z0 = (int)(1 + z0 * width // 2)
    z2 = (int)(1 + z2 * width // 2)
    canvas = np.zeros([width * 2, width * 2]).astype('float32')
    tmp = 1. / 100
    for i in range(100):
        t = i * tmp
        x = (int)((1-t) * (1-t) * x0 + 2 * t * (1-t) * x1 + t * t * x2)
        y = (int)((1-t) * (1-t) * y0 + 2 * t * (1-t) * y1 + t * t * y2)
        z = (int)((1-t) * z0 + t * z2)
        w = (1-t) * w0 + t * w2
        cv2.circle(canvas, (y, x), z, w, -1)
    return 1 - cv2.resize(canvas, dsize=(width, width))

def generate_params(gen,data):
  params=gen(data[None])
  return params


def generate_image(initial,params): 
     """OVERLAY B&W STROKE"""
  output=renderer(params[0])
  output/=0.9
  for i in range(1,len(params)):
    output1=renderer(params[i])
    output*=output1 
    output/=0.86
  image = output[0,...] * initial[:, 0:]
  return image

def generate_image_rgb(initial,params):
    """OVERLAY RGB STROKE"""
  output=renderer(params[0][0][:10][None])
  r=params[0][0][-3]
  g=params[0][0][-2]
  b=params[0][0][-1]
  output=tf.image.grayscale_to_rgb(output)
  output1=tf.where(output[0][0:]<0.50,[r,g,b]*output,output)
  outputt=output1
  for i in range (1,len(params)): 
    output2=renderer(params[i][0][:10][None])
    r=params[i][0][-3]
    g=params[i][0][-2]
    b=params[i][0][-1]

    output2=tf.image.grayscale_to_rgb(output2)
    output3=tf.where(output2[0][0:]<0.50,[r,g,b]*output2,output2)
    outputt*=output3
    outputt/=0.85
  image = outputt[0,...] * initial[:, 0:]
  
  return image
