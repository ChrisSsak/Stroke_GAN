# -*- coding: utf-8 -*-
"""loss_functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H1fDbtaguMMW-UPFd7xiKzaZw1UYXuo0
"""

import tensorflow as tf
loss_object = tf.keras.losses.BinaryCrossentropy(from_logits=True)

def discriminator_loss(disc_real_output, disc_generated_output):
  real_loss = loss_object(tf.ones_like(disc_real_output), disc_real_output)

  generated_loss = loss_object(tf.zeros_like(disc_generated_output), disc_generated_output)

  total_disc_loss = real_loss + generated_loss

  return total_disc_loss

def generator_loss( disc_generated_output,gen_output, target):
  gan_loss = loss_object(tf.ones_like(disc_generated_output), disc_generated_output)
  l1_loss=tf.reduce_mean(tf.square(target-gen_output))
  total_gen_loss = gan_loss + (100 * l1_loss)
  return total_gen_loss, gan_loss, l1_loss

from keras.applications.vgg16 import VGG16
  from keras.layers import Input, Dense

  #TODO
  def perceptual_loss(img_true, img_generated,Model):
            image_shape =(216,216,3)
            vgg = VGG16(include_top=False, weights='imagenet', input_shape=image_shape)
            loss_block3 = Model(inputs=vgg.input, outputs=vgg.get_layer('block3_conv3').output)
            loss_block3.trainable = False
            loss_block2 = Model(inputs=vgg.input, outputs=vgg.get_layer('block2_conv2').output)
            loss_block2.trainable = False
            loss_block1 = Model(input=vgg.input, outputs = vgg.get_layer('block1_conv2').output)
            loss_block1.trainable = False
            return K.mean(K.square(loss_block1(img_true) - loss_block1(img_generated))) + 2*K.mean(K.square(loss_block2(img_true) - loss_block2(img_generated))) + 5*K.mean(K.square(loss_block3(img_true) - loss_block3(img_generated)))